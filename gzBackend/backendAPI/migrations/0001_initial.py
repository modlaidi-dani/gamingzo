# Generated by Django 4.2.14 on 2024-07-28 12:21

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
        ('wagtailimages', '0025_alter_image_file_alter_rendition_file'),
    ]

    operations = [
        migrations.CreateModel(
            name='Affiliation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=200)),
                ('first_name', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('phone_num', models.IntegerField(null=True)),
                ('facebook', models.TextField()),
                ('instagram', models.TextField()),
                ('tiktok', models.TextField()),
                ('youtube', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('pc_concu', 'PC Pré-Conçu'), ('components', 'Composants'), ('peripheral', 'Périphériques'), ('audio', 'Audio & Screens')], max_length=255, null=True)),
                ('label', models.CharField(max_length=255, null=True)),
                ('component', models.CharField(choices=[('CPU', 'CPU'), ('GPU', 'GPU'), ('RAM', 'RAM'), ('storage', 'storage'), ('cooler', 'cooler'), ('power supply', 'power supply'), ('case', 'case')], max_length=255, null=True)),
                ('categoryMere', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories_child', to='backendAPI.category')),
            ],
        ),
        migrations.CreateModel(
            name='CheckoutInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dispatch', models.CharField(default='FromStore', max_length=200)),
                ('total', models.IntegerField(default=0)),
                ('first_name', models.CharField(max_length=200)),
                ('last_name', models.CharField(max_length=200)),
                ('wilaya', models.CharField(max_length=200)),
                ('street', models.CharField(max_length=200)),
                ('phone_num', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('note', models.TextField()),
                ('date', models.DateField(auto_now_add=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContactForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('date', models.DateField(auto_now_add=True)),
                ('phoneNumber', models.CharField(max_length=255, null=True)),
                ('company', models.CharField(max_length=200)),
                ('email', models.EmailField(max_length=254)),
                ('state', models.CharField(choices=[('solved', 'Résolu'), ('en-attente', 'En Attente')], default='en-attente', max_length=255, null=True)),
                ('Message', models.TextField()),
            ],
        ),
        migrations.CreateModel(
            name='FAQ',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question', models.TextField()),
                ('answer', models.TextField()),
                ('show', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Newsletter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=255, null=True)),
                ('designation', models.CharField(max_length=255, null=True)),
                ('header_description', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('price', models.PositiveBigIntegerField(default=0, null=True)),
                ('quantity', models.PositiveBigIntegerField(default=0, null=True)),
                ('price_promo', models.PositiveBigIntegerField(default=0, null=True)),
                ('new', models.BooleanField(blank=True, default=False, null=True, verbose_name='New')),
                ('arrivage', models.BooleanField(blank=True, default=False, null=True, verbose_name='Arrivage')),
                ('promo', models.BooleanField(blank=True, default=False, null=True, verbose_name='Promotion')),
                ('config', models.BooleanField(blank=True, default=False, null=True, verbose_name='Est une config')),
                ('support_page_link', models.URLField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('Product_Section', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('big_headline', wagtail.blocks.TextBlock(blank=True)), ('header', wagtail.blocks.TextBlock(blank=True)), ('caption', wagtail.blocks.TextBlock(blank=True))]))], use_json_field=True)),
                ('gallery', wagtail.fields.StreamField([('Product_Galery', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())]))], use_json_field=True)),
                ('filters', wagtail.fields.StreamField([('filterS', wagtail.blocks.StructBlock([('filter_name', wagtail.blocks.ChoiceBlock(choices=[('socket', 'Socket - Motherboard'), ('size', 'Size - Monitor'), ('write speed', 'Write Speed - Storage'), ('m.2 slots', 'M.2 Slots - Motherboard'), ('support', 'Support - Motherboard'), ('cuda cores', 'CUDA Cores - GPU'), ('expansion slots', 'Expansion Slots - Case'), ('ports', 'Ports - GPU'), ('chipset', 'Chipset - CPU'), ('chipset', 'Chipset - GPU'), ('bearing type', 'Bearing Type - Cooler'), ('architecture', 'Architecture - CPU'), ('directx support', 'DirectX Support - GPU'), ('memory slots', 'Memory Slots - Motherboard'), ('interface', 'Interface - Storage'), ('powerConsumption', 'Power Consumption - CPU'), ('capacity', 'Capacity - Storage'), ('tdp', 'TDP - CPU'), ('lan', 'LAN - Motherboard'), ('form factor', 'Form Factor - Case'), ('max psu length', 'Max PSU Length - Case'), ('max memory', 'Max Memory - Motherboard'), ('resolution', 'Resolution - Monitor'), ('type', 'Type - RAM'), ('socket', 'Socket - CPU'), ('rgb', 'RGB - RAM'), ('certifications', 'Certifications - Power Supply'), ('powerConsumption', 'Power Consumption - Cooler'), ('fan size', 'Fan Size - Power Supply'), ('connectivity', 'Connectivity - Monitor'), ('latency', 'Latency - RAM'), ('eco_mode', 'Eco Mode - Power Supply'), ('dimensions', 'Dimensions - Cooler'), ('memory size', 'Memory Size - GPU'), ('noise level', 'Noise Level - Cooler'), ('response time', 'Response Time - Monitor'), ('powerConsumption', 'Power Consumption - GPU'), ('fluid_dynamic_bearing_fan', 'Fluid Dynamic Bearing Fan - Power Supply'), ('front panel ports', 'Front Panel Ports - Case'), ('modularity', 'Modularity - Power Supply'), ('max cpu height', 'Max CPU Height - Case'), ('max gpu length', 'Max GPU Length - Case'), ('rgb', 'RGB - Cooler'), ('dimensions', 'Dimensions - Case'), ('type', 'Type - Storage'), ('heat spreader', 'Heat Spreader - RAM'), ('modules', 'Modules - RAM'), ('airflow', 'Airflow - Cooler'), ('speed', 'Speed - RAM'), ('controller', 'Controller - Storage'), ('cache', 'Cache - CPU'), ('form factor', 'Form Factor - Storage'), ('radiator_size', 'Radiator Size - Cooler'), ('fan size', 'Fan Size - Cooler'), ('length', 'Length - GPU'), ('read speed', 'Read Speed - Storage'), ('wifi', 'WiFi - Motherboard'), ('cores', 'Cores - CPU'), ('type', 'Type - Motherboard'), ('dimensions', 'Dimensions - Power Supply'), ('usb ports', 'USB Ports - Motherboard'), ('form factor', 'Form Factor - Motherboard'), ('memory type', 'Memory Type - GPU'), ('dimensions', 'Dimensions - RAM'), ('capacity', 'Capacity - RAM'), ('wattage', 'Wattage - Power Supply'), ('motherboard support', 'Motherboard Support - Case'), ('memory interface', 'Memory Interface - GPU'), ('warranty', 'Warranty - Power Supply'), ('zero rpm mode', 'Zero RPM Mode - Power Supply'), ('voltage', 'Voltage - RAM'), ('memory speed', 'Memory Speed - Motherboard'), ('sata ports', 'SATA Ports - Motherboard'), ('memory bandwidth', 'Memory Bandwidth - GPU'), ('drive bays', 'Drive Bays - Case'), ('efficiency rating', 'Efficiency Rating - Power Supply'), ('panel type', 'Panel Type - Monitor'), ('form factor', 'Form Factor - Power Supply'), ('type', 'Type - Cooler'), ('fan', 'Fan - Power Supply'), ('aspect ratio', 'Aspect Ratio - Monitor'), ('stream_processors', 'Stream Processors - GPU'), ('powerConsumption', 'Power Consumption - Motherboard'), ('refresh rate', 'Refresh Rate - Monitor'), ('chipset', 'Chipset - Motherboard'), ('threads', 'Threads - CPU'), ('hybrid_silent_fan_control', 'Hybrid Silent Fan Control - Power Supply'), ('cooling support', 'Cooling Support - Case'), ('pcie slots', 'PCIe Slots - Motherboard')], label='Filter by Category', required=False)), ('value', wagtail.blocks.CharBlock(label='Filter Value'))]))], blank=True, use_json_field=True)),
                ('t_specs', wagtail.fields.StreamField([('TechnicalSpecs', wagtail.blocks.StructBlock([('technical_name', wagtail.blocks.TextBlock(blank=True)), ('technical_value', wagtail.blocks.TextBlock(blank=True))]))], blank=True, use_json_field=True)),
                ('Product_In_Pc', modelcluster.fields.ParentalManyToManyField(blank=True, related_name='mes_composants', to='backendAPI.product')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='backendAPI.category')),
                ('related_product_pages', modelcluster.fields.ParentalManyToManyField(blank=True, to='backendAPI.product')),
            ],
            options={
                'verbose_name': 'Product',
                'verbose_name_plural': 'Products',
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.CreateModel(
            name='SectionHome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255, null=True)),
                ('description', models.TextField()),
                ('link', models.URLField(blank=True, null=True)),
                ('image', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
        ),
        migrations.CreateModel(
            name='ProductsInCheckout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.IntegerField(default=1)),
                ('unitprice', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('checkout', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, related_name='product', to='backendAPI.checkoutinfo')),
                ('product', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backendAPI.product')),
            ],
        ),
        migrations.CreateModel(
            name='ProductPageTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content_object', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tagged_items', to='backendAPI.product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Partners',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('partner_name', models.CharField(max_length=255, null=True)),
                ('partner_link', models.CharField(max_length=255, null=True)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
        ),
        migrations.CreateModel(
            name='Brands',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('brand_name', models.CharField(max_length=255, null=True)),
                ('logo', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
        ),
    ]
