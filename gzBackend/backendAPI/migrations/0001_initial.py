# Generated by Django 4.2.5 on 2024-07-14 12:37

from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import taggit.managers
import wagtail.blocks
import wagtail.fields
import wagtail.images.blocks
import wagtail.search.index


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('pc_concu', 'PC Pré-Conçu'), ('components', 'Composants'), ('peripheral', 'Périphériques'), ('audio', 'Audio & Screens')], max_length=255, null=True)),
                ('label', models.CharField(max_length=255, null=True)),
                ('categoryMere', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='categories_child', to='backendAPI.category')),
            ],
        ),
        migrations.CreateModel(
            name='Components',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('filter_fields', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference', models.CharField(max_length=255, null=True)),
                ('designation', models.CharField(max_length=255, null=True)),
                ('description', wagtail.fields.RichTextField(blank=True, null=True)),
                ('price', models.PositiveBigIntegerField(default=0, null=True)),
                ('quantity', models.PositiveBigIntegerField(default=0, null=True)),
                ('price_promo', models.PositiveBigIntegerField(default=0, null=True)),
                ('new', models.BooleanField(blank=True, default=False, null=True, verbose_name='New')),
                ('arrivage', models.BooleanField(blank=True, default=False, null=True, verbose_name='Arrivage')),
                ('promo', models.BooleanField(blank=True, default=False, null=True, verbose_name='Promotion')),
                ('config', models.BooleanField(blank=True, default=False, null=True, verbose_name='Est une config')),
                ('tech_specs', wagtail.fields.RichTextField(blank=True, null=True)),
                ('support_page_link', models.URLField(blank=True, null=True)),
                ('body', wagtail.fields.StreamField([('Product_Section', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock()), ('caption', wagtail.blocks.RichTextBlock(blank=True))]))], use_json_field=True)),
                ('gallery', wagtail.fields.StreamField([('Product_Galery', wagtail.blocks.StructBlock([('image', wagtail.images.blocks.ImageChooserBlock())]))], use_json_field=True)),
                ('filters', wagtail.fields.StreamField([('filterS', wagtail.blocks.StructBlock([('filter_name', wagtail.blocks.ChoiceBlock(choices=[('powerConsumption', 'Power Consumption - Cooler'), ('architecture', 'Architecture - CPU'), ('memory interface', 'Memory Interface - GPU'), ('chipset', 'Chipset - GPU'), ('memory bandwidth', 'Memory Bandwidth - GPU'), ('radiator_size', 'Radiator Size - Cooler'), ('cores', 'Cores - CPU'), ('threads', 'Threads - CPU'), ('read speed', 'Read Speed - Storage'), ('memory speed', 'Memory Speed - Motherboard'), ('rgb', 'RGB - RAM'), ('dimensions', 'Dimensions - RAM'), ('fan size', 'Fan Size - Cooler'), ('fan', 'Fan - Power Supply'), ('lan', 'LAN - Motherboard'), ('efficiency rating', 'Efficiency Rating - Power Supply'), ('cooling support', 'Cooling Support - Case'), ('response time', 'Response Time - Monitor'), ('voltage', 'Voltage - RAM'), ('motherboard support', 'Motherboard Support - Case'), ('memory slots', 'Memory Slots - Motherboard'), ('modularity', 'Modularity - Power Supply'), ('sata ports', 'SATA Ports - Motherboard'), ('cuda cores', 'CUDA Cores - GPU'), ('cache', 'Cache - CPU'), ('m.2 slots', 'M.2 Slots - Motherboard'), ('fan size', 'Fan Size - Power Supply'), ('size', 'Size - Monitor'), ('warranty', 'Warranty - Power Supply'), ('stream_processors', 'Stream Processors - GPU'), ('directx support', 'DirectX Support - GPU'), ('powerConsumption', 'Power Consumption - Motherboard'), ('wattage', 'Wattage - Power Supply'), ('chipset', 'Chipset - CPU'), ('type', 'Type - Cooler'), ('modules', 'Modules - RAM'), ('refresh rate', 'Refresh Rate - Monitor'), ('noise level', 'Noise Level - Cooler'), ('resolution', 'Resolution - Monitor'), ('ports', 'Ports - GPU'), ('panel type', 'Panel Type - Monitor'), ('form factor', 'Form Factor - Power Supply'), ('expansion slots', 'Expansion Slots - Case'), ('max gpu length', 'Max GPU Length - Case'), ('type', 'Type - Storage'), ('socket', 'Socket - CPU'), ('dimensions', 'Dimensions - Cooler'), ('form factor', 'Form Factor - Case'), ('powerConsumption', 'Power Consumption - GPU'), ('eco_mode', 'Eco Mode - Power Supply'), ('support', 'Support - Motherboard'), ('airflow', 'Airflow - Cooler'), ('connectivity', 'Connectivity - Monitor'), ('tdp', 'TDP - CPU'), ('controller', 'Controller - Storage'), ('type', 'Type - Motherboard'), ('write speed', 'Write Speed - Storage'), ('pcie slots', 'PCIe Slots - Motherboard'), ('bearing type', 'Bearing Type - Cooler'), ('aspect ratio', 'Aspect Ratio - Monitor'), ('socket', 'Socket - Motherboard'), ('max cpu height', 'Max CPU Height - Case'), ('chipset', 'Chipset - Motherboard'), ('usb ports', 'USB Ports - Motherboard'), ('memory size', 'Memory Size - GPU'), ('zero rpm mode', 'Zero RPM Mode - Power Supply'), ('fluid_dynamic_bearing_fan', 'Fluid Dynamic Bearing Fan - Power Supply'), ('capacity', 'Capacity - RAM'), ('wifi', 'WiFi - Motherboard'), ('heat spreader', 'Heat Spreader - RAM'), ('dimensions', 'Dimensions - Case'), ('interface', 'Interface - Storage'), ('form factor', 'Form Factor - Motherboard'), ('latency', 'Latency - RAM'), ('rgb', 'RGB - Cooler'), ('memory type', 'Memory Type - GPU'), ('front panel ports', 'Front Panel Ports - Case'), ('powerConsumption', 'Power Consumption - CPU'), ('capacity', 'Capacity - Storage'), ('hybrid_silent_fan_control', 'Hybrid Silent Fan Control - Power Supply'), ('speed', 'Speed - RAM'), ('dimensions', 'Dimensions - Power Supply'), ('drive bays', 'Drive Bays - Case'), ('certifications', 'Certifications - Power Supply'), ('form factor', 'Form Factor - Storage'), ('max psu length', 'Max PSU Length - Case'), ('length', 'Length - GPU'), ('type', 'Type - RAM'), ('max memory', 'Max Memory - Motherboard')], label='Filter by Category', required=False)), ('value', wagtail.blocks.CharBlock(label='Filter Value'))]))], blank=True, use_json_field=True)),
                ('Product_In_Pc', modelcluster.fields.ParentalManyToManyField(blank=True, related_name='mes_composants', to='backendAPI.product')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='products', to='backendAPI.category')),
                ('related_product_pages', modelcluster.fields.ParentalManyToManyField(blank=True, to='backendAPI.product')),
                ('tags', taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'abstract': False,
            },
            bases=(wagtail.search.index.Indexed, models.Model),
        ),
        migrations.AddField(
            model_name='category',
            name='component',
            field=models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, to='backendAPI.components'),
        ),
    ]
